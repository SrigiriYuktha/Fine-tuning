# -*- coding: utf-8 -*-
"""DL Assignment 2.2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/118Gcq9sT-45jdjJwo2uBZcYLlT0zQ3yI
"""

# Install and import required packages
!pip install transformers datasets --quiet

import os
os.environ["WANDB_DISABLED"] = "true"  # Prevent wandb logging

# Essential imports
import torch
from google.colab import files
from datasets import Dataset
from transformers import (
    GPT2Tokenizer, GPT2LMHeadModel,
    DataCollatorForLanguageModeling,
    Trainer, TrainingArguments
)

# Upload and process text file
uploaded_file = files.upload()
file_name = list(uploaded_file.keys())[0]

# Read and clean the file
with open(file_name, "r", encoding="utf-8") as file:
    content = [line.strip() for line in file if line.strip()]  # Eliminate empty lines

# Create a Hugging Face dataset
hf_dataset = Dataset.from_dict({"text": content})

# Load GPT-2 base tokenizer and model
base_model = "gpt2"
tokenizer = GPT2Tokenizer.from_pretrained(base_model)
tokenizer.pad_token = tokenizer.eos_token  # Use EOS token as padding to avoid warnings
language_model = GPT2LMHeadModel.from_pretrained(base_model)

# Tokenization function
def preprocess(example):
    return tokenizer(example["text"], truncation=True, padding="max_length", max_length=128)

tokenized_data = hf_dataset.map(preprocess, batched=True)

# Collate function for causal language modeling
collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False)

# Define training parameters
train_args = TrainingArguments(
    output_dir="./gpt2-lyrics-model",
    num_train_epochs=3,
    per_device_train_batch_size=4,
    save_steps=200,
    logging_steps=20,
    overwrite_output_dir=True,
    save_total_limit=1,
    prediction_loss_only=True,
    logging_dir="./logs"
)

# Set up trainer
model_trainer = Trainer(
    model=language_model,
    args=train_args,
    train_dataset=tokenized_data,
    tokenizer=tokenizer,
    data_collator=collator
)

# Start training
model_trainer.train()

# Save final model and tokenizer
language_model.save_pretrained("gpt2-lyrics-model")
tokenizer.save_pretrained("gpt2-lyrics-model")

from transformers import pipeline

# Attempt to use a custom fine-tuned model or fall back to GPT-2
try:
    generator = pipeline(
        task="text-generation",
        model="gpt2-lyrics-finetuned",  # Replace with your custom fine-tuned model name
        tokenizer="gpt2-lyrics-finetuned"
    )
except Exception as e:
    print(f"Error: {e}. Falling back to default GPT-2.")
    generator = pipeline(
        task="text-generation",
        model="gpt2",  # Default GPT-2 model if custom model is unavailable
        tokenizer="gpt2"
    )

# Get user prompt
prompt = input("Enter your song prompt: ")

# Generate lyrics
result = generator(prompt, max_new_tokens=50)

# Print the generated text
print("\nGenerated Lyrics:")
print(result[0]['generated_text'])